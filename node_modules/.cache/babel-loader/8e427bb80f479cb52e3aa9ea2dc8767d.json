{"ast":null,"code":"import { store } from \"..\";\nimport { SET_SELECTED_VARIANT_QUANTITY, SET_SELECTED_VARIANT_AND_VARIANT_IMAGE } from \"./types\";\nexport function handleQuantityChange(event) {\n  store.dispatch({\n    type: SET_SELECTED_VARIANT_QUANTITY,\n    payload: {\n      selectedVariantQuantity: parseFloat(event.target.value)\n    }\n  });\n}\nexport function handleOptionChange(event, product) {\n  const {\n    shopify\n  } = store.getState();\n  const {\n    client\n  } = shopify;\n  let selectedOptions;\n  product.options.forEach(selector => {\n    selectedOptions[selector.name] = selector.values[0].value;\n  });\n  const target = event.target;\n  selectedOptions[target.name] = target.value;\n\n  if (client) {\n    const selectedVariant = client.product.variantForOptions(product, selectedOptions);\n    store.dispatch({\n      type: SET_SELECTED_VARIANT_AND_VARIANT_IMAGE,\n      payload: {\n        selectedVariant,\n        selectedVariantImage: selectedVariant.attrs.image\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/yellowcitytech/Dropbox/RCC/rcc-brass-website/src/store/variants/actions.ts"],"names":["store","SET_SELECTED_VARIANT_QUANTITY","SET_SELECTED_VARIANT_AND_VARIANT_IMAGE","handleQuantityChange","event","dispatch","type","payload","selectedVariantQuantity","parseFloat","target","value","handleOptionChange","product","shopify","getState","client","selectedOptions","options","forEach","selector","name","values","selectedVariant","variantForOptions","selectedVariantImage","attrs","image"],"mappings":"AAAA,SAASA,KAAT,QAAsB,IAAtB;AACA,SACIC,6BADJ,EAEIC,sCAFJ,QAGO,SAHP;AAKA,OAAO,SAASC,oBAAT,CACHC,KADG,EAEL;AACEJ,EAAAA,KAAK,CAACK,QAAN,CAAe;AACXC,IAAAA,IAAI,EAAEL,6BADK;AAEXM,IAAAA,OAAO,EAAE;AACLC,MAAAA,uBAAuB,EAAEC,UAAU,CAACL,KAAK,CAACM,MAAN,CAAaC,KAAd;AAD9B;AAFE,GAAf;AAMH;AAED,OAAO,SAASC,kBAAT,CACHR,KADG,EAEHS,OAFG,EAGL;AACE,QAAM;AAAEC,IAAAA;AAAF,MAAcd,KAAK,CAACe,QAAN,EAApB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaF,OAAnB;AACA,MAAIG,eAAJ;AACAJ,EAAAA,OAAO,CAACK,OAAR,CAAgBC,OAAhB,CAAyBC,QAAD,IAAc;AAClCH,IAAAA,eAAe,CAACG,QAAQ,CAACC,IAAV,CAAf,GAAiCD,QAAQ,CAACE,MAAT,CAAgB,CAAhB,EAAmBX,KAApD;AACH,GAFD;AAIA,QAAMD,MAAM,GAAGN,KAAK,CAACM,MAArB;AACAO,EAAAA,eAAe,CAACP,MAAM,CAACW,IAAR,CAAf,GAA+BX,MAAM,CAACC,KAAtC;;AAEA,MAAIK,MAAJ,EAAY;AACR,UAAMO,eAAe,GAAGP,MAAM,CAACH,OAAP,CAAeW,iBAAf,CACpBX,OADoB,EAEpBI,eAFoB,CAAxB;AAKAjB,IAAAA,KAAK,CAACK,QAAN,CAAe;AACXC,MAAAA,IAAI,EAAEJ,sCADK;AAEXK,MAAAA,OAAO,EAAE;AACLgB,QAAAA,eADK;AAELE,QAAAA,oBAAoB,EAAEF,eAAe,CAACG,KAAhB,CAAsBC;AAFvC;AAFE,KAAf;AAOH;AACJ","sourcesContent":["import { store } from \"..\";\nimport {\n    SET_SELECTED_VARIANT_QUANTITY,\n    SET_SELECTED_VARIANT_AND_VARIANT_IMAGE,\n} from \"./types\";\n\nexport function handleQuantityChange(\n    event: React.ChangeEvent<HTMLInputElement>\n) {\n    store.dispatch({\n        type: SET_SELECTED_VARIANT_QUANTITY,\n        payload: {\n            selectedVariantQuantity: parseFloat(event.target.value),\n        },\n    });\n}\n\nexport function handleOptionChange(\n    event: React.ChangeEvent<HTMLSelectElement>,\n    product: ShopifyBuy.Product\n) {\n    const { shopify } = store.getState();\n    const { client } = shopify;\n    let selectedOptions: any;\n    product.options.forEach((selector) => {\n        selectedOptions[selector.name] = selector.values[0].value;\n    });\n\n    const target = event.target;\n    selectedOptions[target.name] = target.value;\n\n    if (client) {\n        const selectedVariant = client.product.variantForOptions(\n            product,\n            selectedOptions\n        );\n\n        store.dispatch({\n            type: SET_SELECTED_VARIANT_AND_VARIANT_IMAGE,\n            payload: {\n                selectedVariant,\n                selectedVariantImage: selectedVariant.attrs.image,\n            },\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}